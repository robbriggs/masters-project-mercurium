#
#   rule : another-rule
#        | NODECL_TREE_CONSTRUCTOR([child_name] rule-name, ...) options
#
#
# Up to 4 children, [child_name] is mandatory and must be a valid C/C++/Fortran name
#
# options is a blank-separated sequence of the following. Each option-name declares extra
# information that is mandatory to the tree (i.e. it cannot be NULL).
#
#    option-name               frontend type
#        symbol                    scope_entry_t*
#        type                      type_t*
#        text                      const char*
#        const-value               const_value_t*
#        template-parameters       template_parameter_list_t*
#        context                   decl_context_t
#
# The order that appears here is the order in which this extra information is
# passed (regardless of the precise syntax of the rule, i.e. 'symbol' is always
# considered before 'type'). An option-name can be appeneded "-opt" to state
# that the node may contain a value of that option, but that value is not
# mandatory for the node. Use this when you want to ensure that copy routines
# copy these values as well (otherwise these extra values will be ignored)
#
# There is a special rule 'nodecl' which is the root of the whole hierarchy and,
# while not enforced, every rule should be referenced in another rule. The
# structure must be nonambiguous (i.e. there must be a single way of
# constructing a given hierarchy)
#

nodecl : NODECL_TOP_LEVEL([top_level] top-level-seq-opt)
top-level : function-code
          | object-init
          | pragma-directive
          | compatibility
          | cxx-decl
          | simd-func-construct

name : NODECL_SYMBOL() symbol type-opt const-value-opt
type : NODECL_TYPE() type

function-code: regular-function-code
             | template-function-code

regular-function-code : NODECL_FUNCTION_CODE([statements]context, [initializers]mem-init-seq-opt) symbol
template-function-code: NODECL_TEMPLATE_FUNCTION_CODE([statements]context, [initializers]mem-init-seq-opt) symbol

object-init : NODECL_OBJECT_INIT() symbol

mem-init: NODECL_MEMBER_INIT([init_expr]expression) symbol
          | cxx-mem-init


statement : statement-but-object-init
          | object-init
          | cxx-decl
          | context
          | function-code

context : NODECL_CONTEXT([in_context] in_context) context

in_context : statement-seq-opt
           | expression

statement-but-object-init: NODECL_EMPTY_STATEMENT()
          | NODECL_EXPRESSION_STATEMENT([nest]expression)
          | compound-statement
          | NODECL_DO_STATEMENT([statement]statement-seq, [condition]expression)
          | NODECL_WHILE_STATEMENT([condition]expression, [statement]statement-seq, [loop_name]name-opt)
          | NODECL_FOR_STATEMENT([loop_header]loop-control, [statement]statement-seq, [loop_name]name-opt)
          | NODECL_IF_ELSE_STATEMENT([condition]expression, [then]statement-seq, [else]statement-seq-opt)
          | NODECL_LABELED_STATEMENT([statement]statement-seq) symbol
          | NODECL_SWITCH_STATEMENT([switch]expression, [statement]statement-seq)
          | NODECL_DEFAULT_STATEMENT([statement]statement-seq)
          | NODECL_CASE_STATEMENT([case]case-expression-seq, [statement]statement-seq)
          | NODECL_BREAK_STATEMENT([construct_name]name-opt)
          | NODECL_CONTINUE_STATEMENT([construct_name]name-opt)
          | NODECL_GOTO_STATEMENT() symbol
          | NODECL_RETURN_STATEMENT([value]expression-opt)
          | pragma-directive
          | pragma-statement
          | c-cxx-only-statements
          | fortran-only-statements
          | parallel-statements
          | compatibility
          | NODECL_ERR_STATEMENT()
          | assert-construct

compound-statement : NODECL_COMPOUND_STATEMENT([statements]statement-seq-opt, [finally]statement-seq-opt)

case-expression : expression

loop-control: NODECL_LOOP_CONTROL([init]expression-seq-opt, [cond]expression-opt, [next]expression-opt)
            | range-loop-control
            | NODECL_UNBOUNDED_LOOP_CONTROL()

range-loop-control : NODECL_RANGE_LOOP_CONTROL([induction_variable] name, [lower]expression, [upper]expression, [step]expression-opt)
# Next one is for C++2011
    | NODECL_ITERATOR_LOOP_CONTROL([range_iterator] name, [initializer]expression)

pragma-directive: NODECL_PRAGMA_CUSTOM_DIRECTIVE([pragma_line]pragma-line, [context_of_decl]pragma-context) text
                | pragma-declaration

pragma-declaration: NODECL_PRAGMA_CUSTOM_DECLARATION([pragma_line]pragma-line, [nested_pragma]pragma-declaration-opt, [context_of_decl]pragma-context, [context_of_parameters]pragma-context-opt) text symbol

pragma-context : NODECL_PRAGMA_CONTEXT() context

pragma-statement : NODECL_PRAGMA_CUSTOM_STATEMENT([pragma_line]pragma-line, [statements]statement-seq) text

pragma-line: NODECL_PRAGMA_CUSTOM_LINE([parameters]pragma-clause-arg-seq-opt, [clauses]pragma-custom-clause-seq-opt, [end_clauses]pragma-custom-clause-seq-opt) text
# The type of a NODECL_PRAGMA_CUSTOM_CLAUSE can be used to mark this clause as "used"
# this is needed for diagnostics
pragma-custom-clause: NODECL_PRAGMA_CUSTOM_CLAUSE([arguments]pragma-clause-arg-seq-opt) text type-opt
pragma-clause-arg: NODECL_PRAGMA_CLAUSE_ARG() text

c-cxx-only-statements : NODECL_TRY_BLOCK([statement]statement-seq, [catch_handlers]catch-handler-seq-opt, [any]statement-seq-opt)

catch-handler : NODECL_CATCH_HANDLER([name]object-init-opt, [statement]statement-seq) type

literal : NODECL_INTEGER_LITERAL() type const-value
    | NODECL_FLOATING_LITERAL() type const-value
    | NODECL_COMPLEX_LITERAL() type const-value
    | NODECL_BOOLEAN_LITERAL() type const-value
    | string-literal
    | structured-value

string-literal: NODECL_STRING_LITERAL() type const-value text-opt

expression : literal
           | name
           | context
           | NODECL_FUNCTION_CALL([called] expression, [arguments] argument-seq-opt, [alternate_name]name-opt, [function_form] function-form-opt) type const-value-opt
           | NODECL_ARRAY_SUBSCRIPT([subscripted] expression, [subscripts]expression-seq) type const-value-opt
           | NODECL_RANGE([lower] expression-opt, [upper] expression-opt, [stride] expression) type const-value-opt
           | NODECL_CLASS_MEMBER_ACCESS([lhs]expression, [member]expression, [member_form]member-access-form-opt) type const-value-opt text-opt
           | NODECL_PLUS([rhs]expression) type const-value-opt
           | NODECL_NEG([rhs]expression) type const-value-opt
           | NODECL_MUL([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_POWER([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_DIV([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_MOD([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_ADD([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_MINUS([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_CONCAT([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_EQUAL([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_DIFFERENT([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_LOWER_THAN([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_LOWER_OR_EQUAL_THAN([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_GREATER_THAN([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_GREATER_OR_EQUAL_THAN([lhs]expression, [rhs]expression) type const-value-opt
           | NODECL_LOGICAL_NOT([rhs]expression) type const-value-opt
           | NODECL_LOGICAL_AND([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_LOGICAL_OR([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_BITWISE_NOT([rhs]expression) type const-value-opt
           | NODECL_BITWISE_AND([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_BITWISE_OR([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_BITWISE_XOR([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_BITWISE_SHL([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_ARITHMETIC_SHR([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_BITWISE_SHR([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
           | NODECL_PARENTHESIZED_EXPRESSION([nest]expression) type const-value-opt
           | NODECL_DEREFERENCE([rhs]expression) type const-value-opt
           | NODECL_CAST([rhs]expression) type text const-value-opt
           | NODECL_COMPOUND_EXPRESSION([nest]context) type const-value-opt
           | NODECL_VECTOR_ADD([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_FMADD([first_op]expression, [second_op]expression, [third_op]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_MINUS([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_FMMINUS([first_mul_op]expression, [second_mul_op]expression, [minus_op]expression-opt, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_MUL([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_DIV([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_MOD([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_NEG([rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_REDUCTION_ADD([scalar_dst]expression, [vector_src]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_REDUCTION_MINUS([scalar_dst]expression, [vector_src]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_REDUCTION_MUL([scalar_dst]expression, [vector_src]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_EQUAL([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_DIFFERENT([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_LOWER_THAN([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_LOWER_OR_EQUAL_THAN([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_GREATER_THAN([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_GREATER_OR_EQUAL_THAN([lhs]expression, [rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_LOGICAL_NOT([rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_LOGICAL_AND([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_LOGICAL_OR([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_BITWISE_NOT([rhs]expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_BITWISE_AND([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_BITWISE_OR([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_BITWISE_XOR([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_BITWISE_SHL([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_BITWISE_SHR([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_ASSIGNMENT([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_STORE([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_UNALIGNED_VECTOR_STORE([lhs] expression, [rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_SCATTER([base] expression, [strides] expression, [source] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_LOAD([rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_UNALIGNED_VECTOR_LOAD([rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_GATHER([base] expression, [strides] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_PROMOTION([rhs] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_LITERAL([scalar_values] expression-seq, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_CONVERSION([nest] expression, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_CAST([rhs]expression, [mask]expression-opt) type const-value-opt
           | NODECL_VECTOR_FUNCTION_CALL([function_call] expression, [scalar_symbol] name, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_FABS([argument] argument, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_SINCOS([source] argument, [sin_pointer] argument, [cos_pointer] argument, [mask]expression-opt) type const-value-opt 
           | NODECL_VECTOR_MASK_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt 
           | NODECL_VECTOR_MASK_CONVERSION([nest] expression) type const-value-opt 
           | NODECL_VECTOR_MASK_NOT([rhs] expression) type const-value-opt 
           | NODECL_VECTOR_MASK_AND([lhs] expression, [rhs] expression) type const-value-opt 
           | NODECL_VECTOR_MASK_OR([lhs] expression, [rhs] expression) type const-value-opt 
           | NODECL_VECTOR_MASK_XOR([lhs] expression, [rhs] expression) type const-value-opt 
           | NODECL_VECTOR_MASK_AND_1_NOT([lhs] expression, [rhs] expression) type const-value-opt 
           | NODECL_VECTOR_MASK_AND_2_NOT([lhs] expression, [rhs] expression) type const-value-opt 
           | c-cxx-expressions
           | fortran-expressions
           | object-init
           | compatibility
           | NODECL_ERR_EXPR()
# This one is intended to represent implicit conversions allowed by the base language
           | NODECL_CONVERSION([nest] expression) type const-value-opt
# Ths one is used when we need an expression only for its type
           | NODECL_DUMMY() type

structured-value: NODECL_STRUCTURED_VALUE([items]initializer-item-seq-opt) type const-value-opt

initializer-item: NODECL_FIELD_DESIGNATOR([field]name, [next]initializer-item)
          | NODECL_INDEX_DESIGNATOR([index]expression, [next]initializer-item)
          | expression
          | fortran-implied-do

fortran-implied-do: NODECL_FORTRAN_IMPLIED_DO([name]name, [range]expression, [items]initializer-item-seq)

argument : expression
         | default-arg
         | fortran-actual-argument

# Note, the text in NODECL_FORTRAN_ACTUAL_ARGUMENT is only used by the
# frontend. Any other part of the compiler should not use it
fortran-actual-argument: NODECL_FORTRAN_ACTUAL_ARGUMENT([argument]fortran-argument) text-opt
                       | NODECL_FORTRAN_NOT_PRESENT()

fortran-argument: expression
                | alt-return

default-arg: NODECL_DEFAULT_ARGUMENT([argument]expression)

alt-return: NODECL_FORTRAN_ALTERNATE_RETURN_ARGUMENT() symbol type const-value-opt

c-cxx-expressions : NODECL_CONDITIONAL_EXPRESSION([condition]expression, [true]expression, [false]expression) type const-value-opt
                  | NODECL_REFERENCE([rhs]expression) type const-value-opt
                  | NODECL_COMMA([rhs]expression, [lhs]expression) type const-value-opt
                  | NODECL_THROW([rhs]expression-opt) type const-value-opt
                  | NODECL_VIRTUAL_FUNCTION_CALL([called] expression, [arguments] argument-seq, [function_form] function-form-opt) type const-value-opt
                  | NODECL_MUL_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_DIV_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_ADD_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_MINUS_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_BITWISE_SHL_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_BITWISE_SHR_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_ARITHMETIC_SHR_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_BITWISE_AND_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_BITWISE_OR_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_BITWISE_XOR_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_MOD_ASSIGNMENT([lhs] expression, [rhs] expression) type const-value-opt
                  | NODECL_PREINCREMENT([rhs]expression) type const-value-opt
                  | NODECL_POSTINCREMENT([rhs]expression) type const-value-opt
                  | NODECL_PREDECREMENT([rhs]expression) type const-value-opt
                  | NODECL_POSTDECREMENT([rhs]expression) type const-value-opt
                  | NODECL_SIZEOF([size_type]type, [expr]expression-opt) type const-value-opt
                  | NODECL_ALIGNOF([align_type]type-or-expr) type const-value-opt
                  | NODECL_OFFSET([base]expression, [offset]expression) type const-value-opt
                  | NODECL_TYPEID([arg]type-or-expr) type const-value-opt
                  | NODECL_NEW([init]expression-opt, [init_real_type] type-opt, [placement]expression-seq-opt, [alloc_func]name-opt) type text const-value-opt
                  | NODECL_DELETE([rhs]expression) type const-value-opt
                  | NODECL_DELETE_ARRAY([rhs]expression) type const-value-opt
                  | NODECL_POINTER_TO_MEMBER() symbol type const-value-opt
                  | NODECL_REAL_PART([rhs]expression) type const-value-opt
                  | NODECL_IMAG_PART([rhs]expression) type const-value-opt
                  | NODECL_OFFSETOF([offset_type]type, [designator]cxx-dependent-initializer-seq) type const-value-opt
                  | NODECL_SHAPING([postfix] expression, [shape] expression-seq) type const-value-opt
                  | NODECL_PSEUDO_DESTRUCTOR_NAME([accessed] expression, [destructor_name] cxx-dependent-name) type const-value-opt
                  | NODECL_VECTOR_CONDITIONAL_EXPRESSION([condition]expression, [true]expression, [false]expression) type const-value-opt 
                  | NODECL_VLA_WILDCARD() type
                  | NODECL_LAMBDA([explicit_captures]explicit-capture-seq-opt) type symbol
                  | cxx-expr-dependent-nodecls
                  | cuda-expressions
                  | mask-expressions
                  | cxx-pack

# Used for C++11 lambdas
explicit-capture: NODECL_CAPTURE_COPY() symbol
                | NODECL_CAPTURE_REFERENCE() symbol

mask-expressions : NODECL_MASK_LITERAL() type const-value

# This is only for dependent parts of C++. These nodecls exist because
# usual nodecls may not retain enough semantic information for a successful
# instantiation. These nodecls should never appear in the code (but may be accessible
# through symbols for instantiation purposes)
cxx-expr-dependent-nodecls: cxx-dependent-name
   | cxx-dependent-initializer
   | cxx-dependent-expressions

cxx-pack : NODECL_CXX_VALUE_PACK([pack]expression) type
         # Here we materialize the expansion, used for nontype template-arguments packs
         | NODECL_CXX_VALUE_PACK_EXPANDED([values]expression-seq-opt) type
         # | NODECL_CXX_TYPE_PACK_EXPANSION()

# nodecl was created entirely to avoid this kind of "declaration nodes" but we
# will not be able to get rid of them until we instantiate template functions
cxx-decl : NODECL_CXX_DECL([context] context-opt) symbol
         | NODECL_CXX_DEF([context] context-opt) symbol
         | NODECL_CXX_EXPLICIT_INSTANTIATION([declarator_name] cxx-dependent-name-opt, [context] context) symbol
         | NODECL_CXX_EXTERN_EXPLICIT_INSTANTIATION([declarator_name] cxx-dependent-name-opt, [context] context) symbol
         | NODECL_CXX_USING_NAMESPACE([context] context) symbol
         | NODECL_CXX_USING_DECL([context] context) symbol
         # Used only in weird cases where parsing must be delayed in the frontend itself
         # not to be used after the FE
         | NODECL_CXX_PARSE_LATER()

# Special nodes for dependent names
cxx-dependent-name : NODECL_CXX_DEP_GLOBAL_NAME_NESTED([items] cxx-atom-dependent-name-seq) type-opt
                   | NODECL_CXX_DEP_NAME_NESTED([items] cxx-atom-dependent-name-seq) type-opt
                   | cxx-atom-dependent-name
cxx-atom-dependent-name : cxx-simple-name
                   | NODECL_CXX_DEP_TEMPLATE_ID([name]cxx-atom-dependent-name) text template-parameters type-opt
                   | NODECL_CXX_DEP_NAME_CONVERSION([context] context, [conversion_type] type-opt) type-opt

cxx-simple-name: NODECL_CXX_DEP_NAME_SIMPLE() text type-opt

cxx-dependent-initializer : NODECL_CXX_INITIALIZER([init] expression) type
    | NODECL_CXX_BRACED_INITIALIZER([init]expression-seq-opt) type
    | NODECL_CXX_EQUAL_INITIALIZER([init]expression) type
    | NODECL_CXX_PARENTHESIZED_INITIALIZER([init]expression-seq-opt)
    | NODECL_C99_DESIGNATED_INITIALIZER([designation]cxx-dependent-initializer-seq, [init]expression)
    | NODECL_C99_FIELD_DESIGNATOR([name]cxx-simple-name)
    | NODECL_C99_INDEX_DESIGNATOR([expr]expression)

# a->b
cxx-dependent-expressions: NODECL_CXX_ARROW([lhs]expression, [member]expression) type const-value-opt text
# a.*b
    | NODECL_CXX_DOT_PTR_MEMBER([lhs]expression, [ptr]expression) type const-value-opt
# a->*b
    | NODECL_CXX_ARROW_PTR_MEMBER([lhs]expression, [ptr]expression) type const-value-opt
# sizeof(expr)
    | NODECL_CXX_SIZEOF([expr] expression) type const-value-opt
# sizeof...(expr)
    | NODECL_CXX_SIZEOF_PACK([expr] expression) type const-value-opt
# alignof(expr)
    | NODECL_CXX_ALIGNOF([expr] expression) type const-value-opt
# (type) { ... }
    | NODECL_CXX_POSTFIX_INITIALIZER([postfix]expression) type const-value-opt
# a[e:e]
    | NODECL_CXX_ARRAY_SECTION_RANGE([postfix] expression, [lower] expression-opt, [upper] expression-opt, [stride] expression-opt) type const-value-opt
# a[e;e]
    | NODECL_CXX_ARRAY_SECTION_SIZE([postfix] expression, [start] expression-opt, [num_items] expression-opt, [stride] expression-opt) type const-value-opt
# T(expr-list)
    | NODECL_CXX_EXPLICIT_TYPE_CAST([init_list]cxx-dependent-initializer) type const-value-opt
# T(expr-list) (T being an expression)
    | NODECL_CXX_DEP_FUNCTION_CALL([called] expression, [arguments] argument-seq-opt, [alternate_name]name-opt) type const-value-opt
    | NODECL_CXX_DEP_NEW([init]expression-opt, [init_real_type] type-opt, [placement]expression-seq-opt) type text
# noexcept(expr)
    | NODECL_CXX_NOEXCEPT([expr] expression) type const-value-opt

# id-expr(expr) in a member initializer
cxx-mem-init: NODECL_CXX_MEMBER_INIT([name]cxx-dependent-name, [initializer]expression) type const-value-opt

function-form: NODECL_CXX_FUNCTION_FORM_TEMPLATE_ID() template-parameters-opt
    | NODECL_CXX_FUNCTION_FORM_IMPLICIT()
    | NODECL_CXX_FUNCTION_FORM_BINARY_INFIX()
    | NODECL_CXX_FUNCTION_FORM_UNARY_PREFIX()
    | NODECL_CXX_FUNCTION_FORM_UNARY_POSTFIX()

member-access-form : NODECL_CXX_MEMBER_FORM_QUALIFIED()

type-or-expr : type
             | expression

fortran-only-statements : NODECL_FORTRAN_ALLOCATE_STATEMENT([items]expression-seq, [options]fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_ARITHMETIC_IF_STATEMENT([expr]expression, [lower]name, [equal]name, [upper]name)
                        | NODECL_FORTRAN_ASSIGNED_GOTO_STATEMENT([index]name, [label_seq]name-seq-opt)
                        | NODECL_FORTRAN_OPEN_STATEMENT([io_items] fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_CLOSE_STATEMENT([io_items] fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_COMPUTED_GOTO_STATEMENT([label_seq]name-seq, [index] expression)
                        | NODECL_FORTRAN_ALTERNATE_RETURN_STATEMENT([index] expression)
                        | NODECL_FORTRAN_DEALLOCATE_STATEMENT([items]expression-seq, [options]fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_IO_STATEMENT([io_spec_list]fortran-io-spec-seq-opt, [io_items]fortran-io-item-seq-opt) text
                        | NODECL_FORTRAN_LABEL_ASSIGN_STATEMENT([value]expression, [label_var]name)
                        | NODECL_FORTRAN_NULLIFY_STATEMENT([items]expression-seq)
                        | NODECL_FORTRAN_PRINT_STATEMENT([format] expression, [io_items]fortran-io-item-seq-opt)
                        | NODECL_FORTRAN_READ_STATEMENT([io_spec_list]fortran-io-spec-seq-opt, [io_items]fortran-io-item-seq-opt)
                        | NODECL_FORTRAN_WRITE_STATEMENT([io_spec_list]fortran-io-spec-seq-opt, [io_items]fortran-io-item-seq-opt)
                        | NODECL_FORTRAN_STOP_STATEMENT([stop_code]expression-opt)
                        | NODECL_FORTRAN_PAUSE_STATEMENT([pause_code]expression-opt)
                        | NODECL_FORTRAN_ENTRY_STATEMENT() symbol
                        | NODECL_FORTRAN_WHERE([where_set] where-pair-seq)
                        | NODECL_FORTRAN_FORALL([loop_control] loop-control-seq, [mask] expression-opt, [statement] statement-seq)

where-pair: NODECL_FORTRAN_WHERE_PAIR([mask] expression-opt, [statement] statement-seq-opt)

# NODECL_FORTRAN_DATA
#   This is used only for .data variable which holds the initializations by means
#   of DATA statements
# NODECL_FORTRAN_EQUIVALENCE
#   This is used only for .equivalence variable which holds the equivalence of
#   data storage
# NODECL_FORTRAN_USE
# NODECL_FORTRAN_USE_ONLY
#   These are used only for .used_modules needed to faithfully regenerate the
#   USE statements in each program unit.
fortran-expressions : NODECL_FORTRAN_DATA([objects]fortran-data-item-seq, [values]fortran-data-item-seq)
                    | NODECL_FORTRAN_EQUIVALENCE([first]expression, [second]expression-seq)
                    | NODECL_FORTRAN_BOZ_LITERAL() type text const-value
                    | NODECL_FORTRAN_BIND_C([name] expression-opt)
                    | NODECL_FORTRAN_BIND_OPENCL([name] expression, [file] expression)
                    | NODECL_FORTRAN_HOLLERITH() type text const-value
                    | NODECL_FORTRAN_USE([module]name, [renamed_items]name-seq-opt)
                    | NODECL_FORTRAN_USE_ONLY([module]name, [only_items]name-seq)

fortran-data-item : expression
                  | fortran-implied-do

fortran-io-spec: NODECL_FORTRAN_IO_SPEC([value]expression-opt) text

fortran-io-item : expression
           | fortran-implied-do

compatibility: unknown-pragma
          | source-comment
          | preprocessor-text
          | verbatim
          | asm-definition
          | gcc-asm-definition
          | gcc-asm-spec
          | upc-sync-statement
          | gcc-builtin-va-arg
          | gxx-traits
          | text

gcc-builtin-va-arg: NODECL_GCC_BUILTIN_VA_ARG([expr] expression, [va_type]type) type

asm-definition : NODECL_ASM_DEFINITION([asm_text]text-seq)

unknown-pragma : NODECL_UNKNOWN_PRAGMA() text
source-comment: NODECL_SOURCE_COMMENT() text
preprocessor-text : NODECL_PREPROCESSOR_LINE() text
verbatim: NODECL_VERBATIM() text

gcc-asm-spec : NODECL_GCC_ASM_SPEC() text

gcc-asm-definition : NODECL_GCC_ASM_DEFINITION([operands0]gcc-asm-operand-seq-opt, [operands1]gcc-asm-operand-seq-opt, [operands2]gcc-asm-operand-seq-opt, [specs]text-seq-opt) text
gcc-asm-operand : NODECL_GCC_ASM_OPERAND( [identifier]text-opt, [constraint]text, [expr]expression-opt)

upc-sync-statement : NODECL_UPC_SYNC_STATEMENT([expr]expression) text

gxx-traits: NODECL_GXX_TRAIT([lhs]type, [rhs]type-opt) text type const-value-opt

text : NODECL_TEXT() text

##############################
# OpenMP                     #
##############################

# Note that we use OPEN_M_P as we want nice names (OpenMP instead of Openmp) in the C++ part

parallel-statements : parallel-execution
                    | synchronization

parallel-execution : task-construct
                   | single-construct
                   | critical-construct
                   | parallel-construct
                   | for-construct
                   | atomic-construct
                   | sections-construct
                   | master-construct
                   | workshare-construct
                   | simd-constructs

# single
single-construct : NODECL_OPEN_M_P*SINGLE([environment]exec-environment-seq-opt, [statements]statement-seq-opt)

# master
master-construct : NODECL_OPEN_M_P*MASTER([statements]statement-seq-opt)

# critical
critical-construct : NODECL_OPEN_M_P*CRITICAL([environment]exec-environment-seq-opt, [statements]statement-seq-opt)

# inline task
task-construct : NODECL_OPEN_M_P*TASK([environment]exec-environment-seq-opt, [statements]statement-seq-opt)

# function task
# Note: do not rely on the information in site_environment
task-call : NODECL_OPEN_M_P*TASK_CALL([environment]exec-environment-seq-opt, [call]expression, [site_environment]exec-environment-seq-opt)

# task expression
task-expression : NODECL_OPEN_M_P*TASK_EXPRESSION([join_task] statement, [task_calls] statement-seq, [sequential_code] statement-seq)

target-declaration : NODECL_OPEN_M_P*TARGET_DECLARATION([devices] text-seq, [symbols] name-seq)

expression : task-call
            | task-expression

top-level: target-declaration

exec-environment : NODECL_OPEN_M_P*IF([condition]expression)
                 | NODECL_OPEN_M_P*FINAL([condition]expression)
                 | NODECL_OPEN_M_P*FIRSTPRIVATE([symbols]name-seq)
                 | NODECL_OPEN_M_P*LASTPRIVATE([symbols]name-seq)
                 | NODECL_OPEN_M_P*FIRST_LASTPRIVATE([symbols]name-seq)
                 | NODECL_OPEN_M_P*SHARED([symbols]name-seq)
                 | NODECL_OPEN_M_P*PRIVATE([symbols]name-seq)
                 | NODECL_OPEN_M_P*AUTO([symbols]name-seq)
                 | NODECL_OPEN_M_P*REDUCTION([reductions]reduction-item-seq)
                 | NODECL_OPEN_M_P*ALLOCA([alloca_expressions]expression-seq)
                 | NODECL_OPEN_M_P*DEP_IN([in_deps]expression-seq)
                 | NODECL_OPEN_M_P*DEP_IN_ALLOCA([in_deps]expression-seq)
                 | NODECL_OPEN_M_P*DEP_IN_VALUE([in_deps]expression-seq)
                 | NODECL_OPEN_M_P*DEP_OUT([out_deps]expression-seq)
                 | NODECL_OPEN_M_P*DEP_INOUT([inout_deps]expression-seq)
                 | NODECL_OPEN_M_P*CONCURRENT([inout_deps]expression-seq)
                 | NODECL_OPEN_M_P*COMMUTATIVE([inout_deps]expression-seq)
                 | NODECL_OPEN_M_P*SCHEDULE([chunk]expression-opt) text
                 | NODECL_OPEN_M_P*TARGET([devices] text-seq, [items] target-item-seq-opt)
                 | NODECL_OPEN_M_P*STOREIR()
# Used for parallel + {sections,for}
                 | NODECL_OPEN_M_P*COMBINED_WORKSHARING()
                 | NODECL_OPEN_M_P*PRIORITY([priority]expression)
                 | NODECL_OPEN_M_P*UNTIED()
                 | NODECL_OPEN_M_P*CRITICAL_NAME() text
                 | NODECL_OPEN_M_P*BARRIER_AT_END()
                 | NODECL_OPEN_M_P*FLUSH_AT_ENTRY()
                 | NODECL_OPEN_M_P*FLUSH_AT_EXIT()
                 | NODECL_OPEN_M_P*TASK_LABEL() text
                 | NODECL_OPEN_M_P*NO_FLUSH()
                 | NODECL_OPEN_M_P*VECTOR_LENGTH_FOR() type
                 | NODECL_OPEN_M_P*SUITABLE([suitable_expressions] expression-seq)
                 | NODECL_OPEN_M_P*MASK()
                 | NODECL_OPEN_M_P*NO_MASK()
                 | NODECL_OPEN_M_P*FUNCTION_TASK_PARSING_CONTEXT([context]pragma-context)


target-item : NODECL_OPEN_M_P*COPY_IN([input_copies]expression-seq)
                 | NODECL_OPEN_M_P*COPY_OUT([output_copies]expression-seq)
                 | NODECL_OPEN_M_P*COPY_INOUT([inout_copies]expression-seq)
                 | NODECL_OPEN_M_P*N_D_RANGE([ndrange_expressions]expression-seq, [function_name]name)
                 | NODECL_OPEN_M_P*SH_MEM([shmem_expressions]expression-seq, [function_name]name)
                 | NODECL_OPEN_M_P*FILE([filename]text, [function_name]name)
                 | NODECL_OPEN_M_P*NAME([name]text, [function_name]name)
                 | NODECL_OPEN_M_P*ONTO([onto_expressions]expression-seq, [function_name]name)
                 | NODECL_OPEN_M_P*IMPLEMENTS([device]text, [function_name]name)

reduction-item : NODECL_OPEN_M_P*REDUCTION_ITEM([reductor]name, [reduced_symbol]name, [reduction_type]type)

# parallel
parallel-construct : NODECL_OPEN_M_P*PARALLEL([environment]exec-environment-seq-opt, [num_replicas]expression-opt, [statements]statement-seq)

# for
for-construct : NODECL_OPEN_M_P*FOR([environment]exec-environment-seq-opt, [loop]statement)
              | NODECL_OPEN_M_P*FOR_APPENDIX([environment]exec-environment-seq-opt, [loop]statement, [appendix]statement-seq)

# workshare (Fortran only)
workshare-construct : NODECL_OPEN_M_P*WORKSHARE([environment]exec-environment-seq-opt, [statements]statement-seq)

# atomic
atomic-construct : NODECL_OPEN_M_P*ATOMIC([environment]exec-environment-seq-opt, [statements]statement-seq)

# sections
sections-construct : NODECL_OPEN_M_P*SECTIONS([environment]exec-environment-seq-opt, [sections]section-construct-seq)

section-construct : NODECL_OPEN_M_P*SECTION([statements]statement-seq)

synchronization : NODECL_OPEN_M_P*WAIT_ON_DEPENDENCES([environment]exec-environment-seq-opt)
# First level of async
                | NODECL_OPEN_M_P*TASKWAIT_SHALLOW([environment]exec-environment-seq-opt)
# All levels of async
                | NODECL_OPEN_M_P*TASKWAIT_DEEP()
                | NODECL_OPEN_M_P*FLUSH_MEMORY([expressions] expression-seq-opt)
# Full barrier
                | NODECL_OPEN_M_P*BARRIER_FULL([environment]exec-environment-seq-opt)
# First half of a barrier (signaling phase)
                | NODECL_OPEN_M_P*BARRIER_SIGNAL()
# Second half of a barrier (waiting phase)
                | NODECL_OPEN_M_P*BARRIER_WAIT()

# SIMD    
simd-constructs : simd-construct
                | simd-for-construct
                | parallel-simd-for-construct

simd-construct : NODECL_OPEN_M_P*SIMD([statement] statement, [environment] exec-environment-seq-opt)
simd-func-construct : NODECL_OPEN_M_P*SIMD_FUNCTION([statement] statement, [environment] exec-environment-seq-opt)
simd-for-construct : NODECL_OPEN_M_P*SIMD_FOR([openmp_for] for-construct, [environment] exec-environment-seq-opt)
parallel-simd-for-construct : NODECL_OPEN_M_P*PARALLEL_SIMD_FOR([statement] statement, [environment] exec-environment-seq-opt)

##############################
# CUDA                       #
##############################

cuda-expressions : NODECL_CUDA_KERNEL_CALL([kernel_config] expression-seq, [function_call] expression) type const-value-opt

##############################
# ANALYSIS                   #
##############################

# Used for analysis checking
reach_def_expression : NODECL_ANALYSIS*REACH_DEF_EXPR([expression] expression, [value] expression)

induction_var_expression : NODECL_ANALYSIS*INDUCTION_VAR_EXPR([induction_variable] expression, [lower] expression, [upper] expression, [stride] expression)

analysis-exec-environment : NODECL_ANALYSIS*UPPER_EXPOSED([upper_exposed_exprs] expression-seq)
                          | NODECL_ANALYSIS*DEFINED([defined_exprs] expression-seq)
                          | NODECL_ANALYSIS*LIVE_IN([live_in_exprs] expression-seq)
                          | NODECL_ANALYSIS*LIVE_OUT([live_out_exprs] expression-seq)
                          | NODECL_ANALYSIS*DEAD([dead_exprs] expression-seq)
                          | NODECL_ANALYSIS*REACHING_DEFINITION_IN([reaching_definitions_in] reach_def_expression-seq)
                          | NODECL_ANALYSIS*REACHING_DEFINITION_OUT([reaching_definitions_out] reach_def_expression-seq)
                          | NODECL_ANALYSIS*INDUCTION_VARIABLE([induction_variables] induction_var_expression-seq)
                          | NODECL_ANALYSIS*AUTO_SCOPE*FIRSTPRIVATE([scoped_variables] expression-seq)
                          | NODECL_ANALYSIS*AUTO_SCOPE*PRIVATE([scoped_variables] expression-seq)
                          | NODECL_ANALYSIS*AUTO_SCOPE*SHARED([scoped_variables] expression-seq)

assert-construct : NODECL_ANALYSIS*ASSERT([statements] statement-seq, [environment] analysis-exec-environment-seq-opt)
